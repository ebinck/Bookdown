[["index.html", "Quantifying Sampled Wetlands on BLM Land Chapter 1 Introduction", " Quantifying Sampled Wetlands on BLM Land Elin Binck 2022-04-02 Chapter 1 Introduction This is a compilation of the code I have written thus far for my master’s research, quantifying wetlands that have been sampled with BLM’s Terrestrial Assessment, Inventory, and Monitoring (AIM) program. While the Terrestrial program aims to sample upland ecosystems, over 40,000 sites have been sampled, meaning even with minimal error, there are likely hundreds of sites that qualify as wetlands. In this bookdown, I use a number of criteria to identify “wetland” sites in the Terrestrial AIM database. bookdown::render_book() bookdown::serve_book() "],["remove-duplicates.html", "Chapter 2 Remove Duplicates 2.1 Load the data 2.2 Break up lpi_tall to investigate duplicates 2.3 Create objects for duplicates for each state 2.4 Remove plots with duplicates", " Chapter 2 Remove Duplicates I was provided all of the AIM data by the BLM in a tall table for easy analysis. However, after beginning to work with the data, I realized there were a number of duplicate records for some reason. As a result, my first step was to remove data from all sites that had any duplicate records. Even if there was one duplicate reading in a site, the reasons seemed to be variable, and I determined it was more efficient to remove all of the data for those sites than to try to fix the issue. Additionally, I decided it was better to omit the data than try to alter it in a way that may not be accurate in relation to on the ground field conditions. 2.1 Load the data lpi_tall&lt;-readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/lpi_tall.Rdata&quot;)%&gt;% rename(SpeciesCode = code) header &lt;- readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/header.Rdata&quot;) 2.1.1 Join lpi with corresponding states PrimKeyState &lt;- header[,c(&quot;PrimaryKey&quot;, &quot;State&quot;)] lpi_tall2&lt;-lpi_tall %&gt;% left_join(PrimKeyState) %&gt;% rename(SpeciesState = State) %&gt;% select(-STATE, -SAGEBRUSH_SPP) ## Joining, by = &quot;PrimaryKey&quot; 2.2 Break up lpi_tall to investigate duplicates #write a function to calculate the number of unique vs total rows for a given state state_dups&lt;-function(state) { dups&lt;-lpi_tall2%&gt;% filter(SpeciesState == state) print(n_distinct(dups)) print(nrow(dups)) } states&lt;-unique(lpi_tall2$SpeciesState) states_list&lt;-setNames(vector(&quot;list&quot;, length(states)), states) #use a for loop to quickly calculate them for each state for (i in seq_along(states)){ N&lt;-state_dups(states[i]) print(states[i]) print(N) } ## [1] 2329459 ## [1] 2329459 ## [1] &quot;NV&quot; ## [1] 2329459 ## [1] 1291815 ## [1] 1291856 ## [1] &quot;CO&quot; ## [1] 1291856 ## [1] 84073 ## [1] 84073 ## [1] &quot;AK&quot; ## [1] 84073 ## [1] 220373 ## [1] 220373 ## [1] &quot;AZ&quot; ## [1] 220373 ## [1] 622846 ## [1] 622846 ## [1] &quot;CA&quot; ## [1] 622846 ## [1] 82541 ## [1] 82546 ## [1] &quot;SD&quot; ## [1] 82546 ## [1] 1035623 ## [1] 1035628 ## [1] &quot;ID&quot; ## [1] 1035628 ## [1] 1187917 ## [1] 1187917 ## [1] &quot;WY&quot; ## [1] 1187917 ## [1] 10844 ## [1] 10844 ## [1] &quot;ND&quot; ## [1] 10844 ## [1] 984421 ## [1] 984421 ## [1] &quot;UT&quot; ## [1] 984421 ## [1] 804749 ## [1] 807959 ## [1] &quot;MT&quot; ## [1] 807959 ## [1] 1427307 ## [1] 1427307 ## [1] &quot;OR&quot; ## [1] 1427307 ## [1] 361284 ## [1] 361284 ## [1] &quot;WA&quot; ## [1] 361284 ## [1] 0 ## [1] 0 ## [1] NA ## [1] 0 ## [1] 785171 ## [1] 785171 ## [1] &quot;NM&quot; ## [1] 785171 2.3 Create objects for duplicates for each state 2.3.0.1 South Dakota SDrows&lt;-lpi_tall2%&gt;% filter(SpeciesState == &quot;SD&quot;) SDdups&lt;- SDrows[duplicated(SDrows),] 2.3.0.2 Montana MTrows&lt;-lpi_tall2%&gt;% filter(SpeciesState == &quot;MT&quot;) MTdups&lt;- MTrows[duplicated(MTrows),] 2.3.0.3 Colorado COrows&lt;-lpi_tall2%&gt;% filter(SpeciesState == &quot;CO&quot;) COdups&lt;- COrows[duplicated(COrows),] 2.3.0.4 Idaho IDrows&lt;-lpi_tall2%&gt;% filter(SpeciesState == &quot;ID&quot;) IDdups&lt;- IDrows[duplicated(IDrows),] 2.4 Remove plots with duplicates 2.4.1 Create a df with all the PrimaryKeys from each dup file for each state uniqueSDdups&lt;-SDdups %&gt;% distinct(PrimaryKey) uniqueMTdups&lt;-MTdups %&gt;% distinct(PrimaryKey) uniqueCOdups&lt;-COdups %&gt;% distinct(PrimaryKey) uniqueIDdups&lt;-IDdups %&gt;% distinct(PrimaryKey) dupPrimaryKeys&lt;-rbind(uniqueSDdups, uniqueMTdups, uniqueCOdups, uniqueIDdups) dupPrimaryKeys&lt;-as.vector(dupPrimaryKeys$PrimaryKey) 2.4.2 Remove all plots that have any duplicate values for (i in seq_along(dupPrimaryKeys)){ lpi_tall2&lt;-lpi_tall2 %&gt;% filter(PrimaryKey !=dupPrimaryKeys[i]) } #confirm that that worked and removed all entries with those PrimaryKeys #also check to see how many plots were removed - it looks like less than 100 which is good n_distinct(lpi_tall$PrimaryKey) ## [1] 36314 n_distinct(lpi_tall2$PrimaryKey) ## [1] 36232 2.4.3 Check for more duplicates #No more duplicates exist! n_distinct(lpi_tall2) ## [1] 11229988 "],["correct-species-codes.html", "Chapter 3 Correct Species Codes 3.1 Load the rest of the data 3.2 Join lpi_tall2 with other species lists", " Chapter 3 Correct Species Codes library(tidyverse) library(tidyr) library(readr) knitr::opts_chunk$set(echo = TRUE) 3.1 Load the rest of the data 3.1.0.1 LPI data (dups removed) lpi_tall2&lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/lpi_tall.DupsRemoved.csv&quot;) 3.1.0.2 State Species List This is the data that has the “correct” codes to replace incorrect ones. StateSpecies&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/ExportedTerrestrial_Data/tblStateSpecies.csv&quot;) %&gt;% select(SpeciesCode, ScientificName, UpdatedSpeciesCode, SpeciesState) #change some of the incorrectly formatted data StateSpecies[&quot;SpeciesCode&quot;][StateSpecies[&quot;SpeciesCode&quot;] == &quot;7-Feb&quot;] &lt;- &quot;FEBR7&quot; StateSpecies[&quot;SpeciesCode&quot;][StateSpecies[&quot;SpeciesCode&quot;] == &quot;2-Feb&quot;] &lt;- &quot;FEBR2&quot; StateSpecies[&quot;SpeciesCode&quot;][StateSpecies[&quot;SpeciesCode&quot;] == &quot;2-Mar&quot;] &lt;- &quot;MARCH2&quot; 3.1.0.3 Wetland AIM Master Species List WetAIMmasterlist &lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetIndicators/WetlandAIM_MasterSpeciesList.csv&quot;)%&gt;% select(Symbol, WMVC_WetStatus, AW_WetStatus, GP_WetStatus, Scientific.Name) 3.1.0.4 USDA plant list USDAlist &lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetIndicators/NationalPlantList.csv&quot;) USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;7-Feb&quot;] &lt;- &quot;FEBR7&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;5-Feb&quot;] &lt;- &quot;FEBR5&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;2-Feb&quot;] &lt;- &quot;FEBR2&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;2-Mar&quot;] &lt;- &quot;MARCH2&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;Dec-70&quot;] &lt;- &quot;DECE70&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;5-Jun&quot;] &lt;- &quot;JUNE5&quot; USDAlist[&quot;Symbol&quot;][USDAlist[&quot;Symbol&quot;] == &quot;2-Nov&quot;] &lt;- &quot;NOVE2&quot; 3.2 Join lpi_tall2 with other species lists 3.2.1 Join with USDA plant list #First, create a new column with EITHER the Symbol or the Synonym to prevent duplication when joining USDAlist_oneCode&lt;- USDAlist %&gt;% mutate(SpeciesCode = if_else(Synonym.Symbol == &quot;&quot;,Symbol, Synonym.Symbol)) %&gt;% select(-Synonym.Symbol) lpi_USDA &lt;- lpi_tall2 %&gt;% left_join(USDAlist_oneCode, by = &quot;SpeciesCode&quot;) 3.2.2 Join with StateSpecies 3.2.2.1 Prep StateSpecies to join Here I need to remove all duplicate combinations of state and species code. To do so, I used anti join to find all of the records that are redundant because they match up with codes from the USDA list. This also conveniently removed all duplicates, so when I join with the lpi data, this should give me a species name and possibly an “updated code” for any listings that did not already match with the USDA list. #Investigate how many of the codes from the StateSpecies list show up in the USDA list w/ synonyms, and how many don&#39;t USDA_StateSpecies &lt;- USDAlist_oneCode %&gt;% inner_join(StateSpecies, by = &quot;SpeciesCode&quot;) #there are only 2,500ish records that don&#39;t match. Let&#39;s look at those: antiUSDA_StateSpecies &lt;-StateSpecies %&gt;% anti_join(USDAlist_oneCode, by = &quot;SpeciesCode&quot;) #It looks like there are no duplicates anymore also! So now I will join this to the lpi data: unique(antiUSDA_StateSpecies$UpdatedSpeciesCode) ## [1] &quot;&quot; &quot;JUALN&quot; &quot;SASP91&quot; &quot;SPHAG2&quot; &quot;ASROM&quot; &quot;2FUNGI&quot; &quot;CAMI10&quot; ## [8] &quot;CEIS60&quot; &quot;CILA70&quot; &quot;CLST7&quot; &quot;DRINC&quot; &quot;HUPER&quot; &quot;OROBA&quot; &quot;PLAL8&quot; ## [15] &quot;SPCO70&quot; &quot;TEMN70&quot; &quot;AMMEI2&quot; &quot;GALIU&quot; &quot;RIMO2&quot; &quot;ACTH7&quot; &quot;LILE3&quot; ## [22] &quot;&lt;Null&gt;&quot; &quot;VEWO2&quot; &quot;RIBES&quot; &quot;MAGR2&quot; &quot;SATR12&quot; &quot;ANPA4&quot; &quot;ORST2&quot; ## [29] &quot;SACA52&quot; &quot;FRAL2&quot; &quot;ALTE&quot; &quot;THAR5&quot; &quot;COLI2&quot; &quot;HECO26&quot; &quot;ALPR3&quot; ## [36] &quot;JUHO2&quot; &quot;CRPO5&quot; &quot;BOER4&quot; &quot;SALIX&quot; &quot;SCLER10&quot; &quot;SEDUM&quot; &quot;ERIGE2&quot; ## [43] &quot;GIIN2&quot; &quot;HEPA11&quot; &quot;PUTR2&quot; &quot;RUMEX&quot; &quot;EUPHO&quot; &quot;PENST&quot; &quot;POLYG4&quot; ## [50] &quot;ARFR4&quot; &quot;ARTRW8&quot; &quot;ANST2&quot; &quot;ARTRT&quot; &quot;NOCU&quot; &quot;AMAL2&quot; &quot;ACMI2&quot; ## [57] &quot;AGGL&quot; &quot;ALLIU&quot; &quot;AMBRO&quot; &quot;ANTEN&quot; &quot;ARABI2&quot; &quot;CRAC2&quot; &quot;DRABA&quot; ## [64] &quot;SPORO&quot; &quot;TAOF&quot; &quot;TRDU&quot; &quot;TRIFO&quot; 3.2.2.2 Join the data #Join the lpi data that was joined with the USDA codes with the state species codes that are not redundant with the usda list. This automatically joins by SpeciesCode and SpeciesState #so, this should produce the same number of records as lpi_tall2/lpi_USDA - and it does! #Add the column with the &quot;correct code,&quot; so basically any codes that differ between the UpdatedSpeciesCode and SpeciesCode will be replaced with the UpdatedSpeciesCode value. lpi_USDA_StateSpecies&lt;-lpi_USDA %&gt;% left_join(antiUSDA_StateSpecies) %&gt;% mutate(CorrectSpeciesCode = if_else(UpdatedSpeciesCode == &quot;&quot;, SpeciesCode, UpdatedSpeciesCode, missing = SpeciesCode)) ## Joining, by = c(&quot;SpeciesCode&quot;, &quot;SpeciesState&quot;) 3.2.3 Join with USDA list again This time I will be joining by scientific name, to try to catch any records where codes were just not right for some reason, but scientific names were. #I shouldn&#39;t need to do this with USDAlist_oneCode, since the Wetland AIM master list matched up 100% with the main symbol column, so that should be sufficient to get me what I want in terms of final match with the WetAIM master list. USDAlist2&lt;- USDAlist %&gt;% rename(&quot;Symbol2&quot; = &quot;Symbol&quot;, &quot;Sci.Name&quot;=&quot;Scientific.Name.with.Author&quot;) %&gt;% select(-&quot;Common.Name&quot;, - &quot;Family&quot;, - &quot;Synonym.Symbol&quot;) #Now, join the USDA list again, joining with its scientific name column (Sci.Name) to the ScientificName column that was attached from the StateSpecies list lpi_USDA2_StateSpecies&lt;- lpi_USDA_StateSpecies %&gt;% left_join(USDAlist2, by = c(&quot;ScientificName&quot; = &quot;Sci.Name&quot;)) %&gt;% mutate(CorrectSpeciesCode2 = if_else(!is.na(Symbol2), Symbol2, CorrectSpeciesCode)) %&gt;% select(-Symbol2, -Symbol, -CorrectSpeciesCode, -UpdatedSpeciesCode, -ScientificName) #No duplicates, which is a great sign! #this adds a correct symbol column (Symbol2) directly from the USDA list that should match up to the Wetland Master list. This actually looks like it just replaces unkown codes that were assigned a family with just the family code, so I probably didnt need to do this. But, I don&#39;t think it hurts to have done it. rm(list=ls()) "],["calculate-percent-cover-of-hydrophytic-species.html", "Chapter 4 Calculate Percent Cover of Hydrophytic Species 4.1 Load Data 4.2 Remove Soil Surface Codes and non plant codes 4.3 Calculate the percent relative cover of each species for each transect 4.4 Apply Wetland Indicator Statuses 4.5 Spatially apply the wetland indicator regions 4.6 Calculate the percent hydrophytic per plot 4.7 Reattach the spatial info", " Chapter 4 Calculate Percent Cover of Hydrophytic Species 4.1 Load Data lpi_CorrectCodes&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/lpi_tall_CorrectCodes.csv&quot;) %&gt;% select(LineKey, RecKey, FormType, FormDate, CheckboxLabel, PrimaryKey, PointLoc, PointNbr, layer, SpeciesCode, chckbox, source, SpeciesState, Scientific.Name.with.Author, CorrectSpeciesCode2) WetAIMmasterList&lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetIndicators/WetlandAIM_MasterSpeciesList.csv&quot;) %&gt;% select(Symbol, WMVC_WetStatus, AW_WetStatus, GP_WetStatus) Regions&lt;-st_read(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/coe_regions/USACE_Regions_NAD83.shp&quot;) ## Reading layer `USACE_Regions_NAD83&#39; from data source ## `/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/coe_regions/USACE_Regions_NAD83.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 11 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -179.1334 ymin: -14.38165 xmax: 179.7882 ymax: 71.39805 ## Geodetic CRS: NAD83 header &lt;- readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/header.Rdata&quot;) 4.2 Remove Soil Surface Codes and non plant codes Remove all codes that are not vascular plants, so that I can calculate relative % cover lpi_CorrectCodesPlants &lt;- lpi_CorrectCodes %&gt;% rename(&quot;CorrectSpeciesCode&quot; = &quot;CorrectSpeciesCode2&quot;) %&gt;% filter(layer != &quot;SoilSurface&quot;, !SpeciesCode %in% c(&quot;L&quot;, &quot;WL&quot;, &quot;VL&quot;, &quot;WA&quot;, &quot;S&quot;)) 4.3 Calculate the percent relative cover of each species for each transect After checking for NAs in LineKey, it looks like every entry has a value for that column, so I will go with that. RelCover&lt;-lpi_CorrectCodesPlants %&gt;% group_by(PrimaryKey, LineKey) %&gt;% mutate(NumPlantHits = length(LineKey)) %&gt;% group_by(PrimaryKey, LineKey,CorrectSpeciesCode) %&gt;% mutate(NumSpeciesHits = length(CorrectSpeciesCode)) %&gt;% summarise(RelativeCover = NumSpeciesHits/NumPlantHits) %&gt;% distinct(.) ## `summarise()` has grouped output by &#39;PrimaryKey&#39;, &#39;LineKey&#39;, ## &#39;CorrectSpeciesCode&#39;. You can override using the `.groups` argument. #I think this worked, though there was likely a much easier way to do it 4.4 Apply Wetland Indicator Statuses RelCoverWetIndicators&lt;-RelCover %&gt;% left_join(WetAIMmasterList, by = c(&quot;CorrectSpeciesCode&quot; = &quot;Symbol&quot;)) 4.5 Spatially apply the wetland indicator regions 4.5.1 Find the LRRs of every Primary Key Use the lat long from the header files to match LRRs to each plot #create a spatial object from the LRR file st_crs(Regions) ## Coordinate Reference System: ## User input: NAD83 ## wkt: ## GEOGCRS[&quot;NAD83&quot;, ## DATUM[&quot;North American Datum 1983&quot;, ## ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;latitude&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;longitude&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4269]] mapview(Regions) #Create a spatial object using the coordinates from the header file SpatialInfo&lt;-header %&gt;% st_as_sf(., coords = c(&quot;Longitude_NAD83&quot;, &quot;Latitude_NAD83&quot;), crs = 4269) %&gt;% select(&quot;PrimaryKey&quot;) #tell it to use s2 to get rid of the planar/projection issue sf_use_s2() ## [1] TRUE #Join those two files WetRegions&lt;-st_join(Regions, SpatialInfo, join = st_contains) #Convert the new file to a data frame to be merged with the lpi data WetRegions&lt;-as.data.frame(WetRegions) %&gt;% select(-geometry) 4.5.2 Join the LRR data to the LPI data #Join the dfs and remove all the sites with Alaska LRRs to try to get rid of all Alaska sites RelCovWetIndicatorswLRR&lt;- RelCoverWetIndicators %&gt;% left_join(WetRegions) %&gt;% filter(Region != &quot;USACE Alaska Region&quot;) %&gt;% mutate(WetIndicator = case_when( Region == &quot;USACE Arid West Region&quot; ~ AW_WetStatus, Region == &quot;USACE Western Mountains, Valleys, and Coast Region&quot; ~ WMVC_WetStatus, Region == &quot;USACE Great Plains Region&quot; ~ GP_WetStatus)) %&gt;% select(-WMVC_WetStatus, -AW_WetStatus, -Region) ## Joining, by = &quot;PrimaryKey&quot; #It seems like using s2 eliminated the issue of some Regions being NA 4.6 Calculate the percent hydrophytic per plot RelCovHydro&lt;- RelCovWetIndicatorswLRR %&gt;% filter(WetIndicator == &quot;FAC&quot; | WetIndicator == &quot;FACW&quot; | WetIndicator == &quot;OBL&quot;) %&gt;% group_by(PrimaryKey,LineKey) %&gt;% summarise(TransectPercent = sum(RelativeCover)) %&gt;% ungroup() ## `summarise()` has grouped output by &#39;PrimaryKey&#39;. You can override using the ## `.groups` argument. RelCovHydroPlot&lt;- RelCovHydro %&gt;% group_by(PrimaryKey) %&gt;% summarise(PlotPercent = mean(TransectPercent)) #Plots that have over 50% hydrophytic over50 &lt;- RelCovHydroPlot %&gt;% filter(PlotPercent &gt; 0.5) #Plots that have between 25 and 50% hydrophytic between25and50 &lt;- RelCovHydroPlot %&gt;% filter(PlotPercent &gt; 0.25 &amp; PlotPercent &lt;= 0.5) 4.7 Reattach the spatial info 4.7.1 Reattach the lat long info sourced from header locationinfo&lt;-header %&gt;% select(PrimaryKey, Latitude_NAD83, Longitude_NAD83) over50 &lt;- over50 %&gt;% left_join(locationinfo) ## Joining, by = &quot;PrimaryKey&quot; between25and50 &lt;- between25and50 %&gt;% left_join(locationinfo) ## Joining, by = &quot;PrimaryKey&quot; rm(list=ls()) "],["surface-water.html", "Chapter 5 Surface Water 5.1 Load the LPI data 5.2 Calculate percent surface water 5.3 Join this data with the data of 25 to 50% hydrophytic species", " Chapter 5 Surface Water knitr::opts_chunk$set(echo = TRUE) library(tidyverse) 5.1 Load the LPI data header &lt;- readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/header.Rdata&quot;) %&gt;% select(PrimaryKey, State) lpi_tall&lt;-readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/lpi_tall.Rdata&quot;) %&gt;% select(LineKey, PrimaryKey, PointLoc, PointNbr, layer, code) %&gt;% left_join(header) %&gt;% #attach state from header so you can remove alaska data filter(State != &quot;AK&quot;) ## Joining, by = &quot;PrimaryKey&quot; 5.2 Calculate percent surface water SurfaceWater&lt;-lpi_tall %&gt;% group_by(PrimaryKey, LineKey) %&gt;% mutate(NumLPIHits = n_distinct(PointNbr)) %&gt;% mutate(WaterHits = if_else(code %in% c(&quot;W&quot;, &quot;WA&quot;), 1, 0)) %&gt;% group_by(PrimaryKey, LineKey) %&gt;% mutate(NumWaterHits = sum(WaterHits)) %&gt;% summarise(PercentWaterTransect = NumWaterHits/NumLPIHits) %&gt;% distinct(.) %&gt;% group_by(PrimaryKey) %&gt;% summarise(PercentWaterPlot = mean(PercentWaterTransect)) %&gt;% filter(PercentWaterPlot != 0) ## `summarise()` has grouped output by &#39;PrimaryKey&#39;, &#39;LineKey&#39;. You can override ## using the `.groups` argument. over2&lt;-SurfaceWater %&gt;% filter(PercentWaterPlot&gt;0.02) over1&lt;-SurfaceWater %&gt;% filter(PercentWaterPlot&gt;0.01) I double checked a handful of the percentages and they look good! Ready to move on. 5.3 Join this data with the data of 25 to 50% hydrophytic species Since I used the original data to do this, I need to now make sure all of those sites also have 25-50% hydrophytic species. Having skipped ahead (oops), it seems that there are definiteley a number that do not have 25-50%. Do I want to throw out the plots that have less than that? OH! Or, is there a chance some of them have greater than 50%? I think I want to start out by just looking at the percentages to see what I am working with, so I will first join with all of the hydrophytic data somehow.. RelHydroCover&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/RelHydroCover.csv&quot;) over2hydroCover&lt;-over2 %&gt;% left_join(RelHydroCover) ## Joining, by = &quot;PrimaryKey&quot; rm(list=ls()) "],["final-sites-between-25-and-50-hydrophytic-plant-species.html", "Chapter 6 Final sites between 25 and 50% hydrophytic plant species 6.1 Load the data 6.2 Combine the data", " Chapter 6 Final sites between 25 and 50% hydrophytic plant species knitr::opts_chunk$set library(dplyr) 6.1 Load the data Load all of the independent data sets and merge them together. over2&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/over2_SurfaceWater.csv&quot;) w.in50m.rivers&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/w.in50m.rivers.csv&quot;) %&gt;% select(PrimaryKey) %&gt;% distinct(.) #for some reason there are some duplicates in these w.in50m.waterbodies&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/w.in50m.waterbodies.csv&quot;)%&gt;% select(PrimaryKey) %&gt;% distinct(.) #for some reason there are some duplicates in these between25and50_NWI&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/btwn25and50_NWI.csv&quot;) %&gt;% select(PrimaryKey) btwn25and50_BpS&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/btwn25and50_BiophysicalRaster.csv&quot;) %&gt;% select(PrimaryKey) 6.2 Combine the data Combined, if all are unique, there should be 171. I wonder how many there will be when they are all combined? all25to50&lt;-over2 %&gt;% select(PrimaryKey) %&gt;% full_join(w.in50m.rivers) %&gt;% full_join(w.in50m.waterbodies) %&gt;% full_join(between25and50_NWI) %&gt;% full_join(btwn25and50_BpS) ## Joining, by = &quot;PrimaryKey&quot; ## Joining, by = &quot;PrimaryKey&quot; ## Joining, by = &quot;PrimaryKey&quot; ## Joining, by = &quot;PrimaryKey&quot; rm(list=ls()) This provides me with all of the Primary Keys from my queries. "],["initial-analyses.html", "Chapter 7 Initial Analyses 7.1 Load the data 7.2 Percent Hydrophytic 7.3 Percent Native/Noxious", " Chapter 7 Initial Analyses knitr::opts_chunk$set(echo = TRUE) library(tidyverse) library(ggplot2) library(rgbif) library(ggthemes) 7.1 Load the data 7.1.1 Wetland AIM data LPIcover2019_CO&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetlandAIM/LPIcover2019_CO.csv&quot;) %&gt;% mutate(year = 2019) LPIcover2019_UT&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetlandAIM/LPIcover2019_UT.csv&quot;) %&gt;% mutate(year = 2019) #these are all *absolute metrics* WetAIMIndicators2020&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetlandAIM/WetAIMIndicators2020.csv&quot;) %&gt;% mutate(year = 2020) %&gt;% rename(Plot.ID = PlotID) WetAIM.Relative.Cover2020&lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/WetlandAIM/ALL_RelativeCoverMetrics2020.csv&quot;) %&gt;% mutate(year = 2020) %&gt;% rename(Plot.ID = PlotID) #why are there two hydrophyte columns?? hydrophytes&lt;-WetAIMIndicators2020 %&gt;% select(Plot.ID, CommunityLPIPctHydroFAC, HydroFACCover) 7.1.2 Terrestrial AIM data #load this info for later use header &lt;- readRDS(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/AIM_tall_tables_export_2021-09-21/header.Rdata&quot;) StateSpecies&lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/ExportedTerrestrial_Data/tblStateSpecies.csv&quot;) RelativeCover&lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/RelativeCover.csv&quot;) lpi_CorrectCodes&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/lpi_tall_CorrectCodes.csv&quot;) #this is the table that contains elevation data for each transect tblLines &lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/ExportedTerrestrial_data/tblLines.csv&quot;) #load the final 25-50 hydrophytic data that matched the queries all25to50&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/Btwn25and50hydrophytic/all25to50.csv&quot;) over50&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/over50hydrophytic.csv&quot;) %&gt;% select(PrimaryKey, PlotPercent) #Load all of the points with 25-50% (before running queries) to get the percent hydrophytic back to the all25to50 data between25to50hydrophytic&lt;-read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/25to50hydrophytic.csv&quot;) %&gt;% select(PrimaryKey, PlotPercent) #left join to get the percent hydrophytic on to all25to50 all25to50&lt;-all25to50 %&gt;% left_join(between25to50hydrophytic) ## Joining, by = &quot;PrimaryKey&quot; #combine them to get a single dataset of &quot;wetlands&quot; Terr.Wetlands&lt;-rbind(all25to50, over50) %&gt;% mutate(source = &quot;Terrestrial&quot;) %&gt;% rename(HydroCover = PlotPercent) %&gt;% rename(Plot.ID = PrimaryKey) 7.2 Percent Hydrophytic 7.2.1 Terrestrial “wetlands” sites with Wetland AIM sites #pull out the hydrophytic cover from the wetland AIM datasets CO2019.hydroCover&lt;-LPIcover2019_CO %&gt;% select(Plot.ID, Relative.HydrophyteFAC.Cover) %&gt;% rename(HydroFACCover = Relative.HydrophyteFAC.Cover) UT2019.hydroCover&lt;-LPIcover2019_UT%&gt;% select(Plot.ID, Relative.HydrophyteFAC.Cover) %&gt;% rename(HydroFACCover = Relative.HydrophyteFAC.Cover) all2020.hydroCoverREL&lt;-WetAIM.Relative.Cover2020 %&gt;% select(Plot.ID, RelativeHydroFACCover) %&gt;% rename(HydroFACCover = RelativeHydroFACCover) %&gt;% mutate(HydroFACCover = HydroFACCover/100) #merge all of the Wetland data together WetAIMhydrophytic&lt;-rbind(CO2019.hydroCover, UT2019.hydroCover, all2020.hydroCoverREL) %&gt;% mutate(source = &quot;Wetland&quot;) %&gt;% rename(HydroCover = HydroFACCover) #now combine all the data for simpler plotting all.sites&lt;-rbind(Terr.Wetlands, WetAIMhydrophytic) ggplot()+ geom_boxplot(data = all.sites, aes(x = source, y = (HydroCover*100)))+ theme_bw()+ labs(x = &quot;AIM Program&quot;, y = &quot;Percent Hydrophytic Species&quot;, title = &quot;Relative Hydrophytic Cover&quot;)+ theme(plot.title = element_text(size = 14, hjust = 0.5, face = &quot;bold&quot;)) ## Warning: Removed 3 rows containing non-finite values (stat_boxplot). ### All Terrestrial sites with Wetland AIM sites #I think this only has sites that have FAC or wetter plants - go back to CalculatePercentCover.Rmd and change that somewhere... TerrRelCovHydro &lt;- read.csv(&quot;/Users/elinbinck/Documents/Grad_School/Thesis/R_project/Thesis_Research/data/RelHydroCover.csv&quot;) %&gt;% mutate(source = &quot;Terrestrial&quot;) %&gt;% rename(HydroCover = PlotPercent, Plot.ID = PrimaryKey) all.sites.allTerr&lt;-rbind(TerrRelCovHydro, WetAIMhydrophytic) ggplot()+ geom_boxplot(data = all.sites.allTerr, aes(x = source, y = (HydroCover*100)))+ theme_bw()+ labs(x = &quot;AIM Program&quot;, y = &quot;Percent Hydrophytic Species&quot;, title = &quot;Relative Hydrophytic Cover&quot;)+ theme(plot.title = element_text(size = 14, hjust = 0.5, face = &quot;bold&quot;)) ## Warning: Removed 3 rows containing non-finite values (stat_boxplot). 7.3 Percent Native/Noxious 7.3.1 Calculate Relative cover for Terrestrial wetlands Here I will need to attach states from Header, and if species are noxious from state species, assuming these are state specific. I will also need to load in the lpi tall table info with all of the species in order to calculate the metrics. #Attach states to the Terrestrial data #first, extract the state for each plot states&lt;-header %&gt;% select(PrimaryKey, State) #then, add that info to the terrestrial wetlands Terr.Wetlands.state&lt;-Terr.Wetlands %&gt;% left_join(states, by = c(&quot;Plot.ID&quot; = &quot;PrimaryKey&quot;)) #next match up all the lpi data for those plots Terr.Wet.lpi&lt;-Terr.Wetlands.state %&gt;% inner_join(lpi_CorrectCodes, by = c(&quot;Plot.ID&quot; = &quot;PrimaryKey&quot;)) %&gt;% select(Plot.ID, HydroCover, source.x, State, LineKey, layer,SpeciesCode, CorrectSpeciesCode2, PointNbr) #create an object with species codes, whether they are noxious or not, and the corresponding state for that info noxious.info&lt;- StateSpecies %&gt;% select(SpeciesCode, Noxious, SpeciesState) %&gt;% distinct(.) unique(noxious.info$Noxious) ## [1] &quot;NO&quot; &quot;YES&quot; &quot;&quot; &quot;No&quot; &quot;Yes&quot; &quot;NO &quot; #try to join the noxious info to the lpi data... hopefully this won&#39;t create duplicates? Terr.Wet.noxious&lt;-Terr.Wet.lpi %&gt;% left_join(noxious.info, by =c(&quot;SpeciesCode&quot;, &quot;State&quot; = &quot;SpeciesState&quot;)) #Now calculate the number of noxious species and calculate relative percent cover Terr.Rel.Noxious&lt;-Terr.Wet.noxious %&gt;% group_by(Plot.ID, LineKey) %&gt;% mutate(NumPlantHits = length(LineKey)) %&gt;% mutate(Noxious = if_else(Noxious == &quot;YES&quot; | Noxious == &quot;Yes&quot;, 1, 0, missing = 0)) %&gt;% group_by(Plot.ID, LineKey) %&gt;% summarise(NumNoxiousHits = sum(Noxious), NumPlantHits) %&gt;% summarise(RelativeNoxCoverLine = NumNoxiousHits/NumPlantHits) %&gt;% group_by(Plot.ID) %&gt;% summarise(RelativeNoxCoverPlot = mean(RelativeNoxCoverLine)) %&gt;% mutate(source = &quot;Terrestrial&quot;) ## `summarise()` has grouped output by &#39;Plot.ID&#39;, &#39;LineKey&#39;. You can override ## using the `.groups` argument. ## `summarise()` has grouped output by &#39;Plot.ID&#39;, &#39;LineKey&#39;. You can override ## using the `.groups` argument. To be continued… "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
